//
// Copyright (c) 2023 Zander Schwid & Co. LLC.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: certificates.proto

package sprintpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Zone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zone             string        `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`                                                    // example.com, zone is in punycode
	Domains          []string      `protobuf:"bytes,2,rep,name=domains,proto3" json:"domains,omitempty"`                                              // domain names in the zone, utf-8
	Options          []string      `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`                                              // if has "zone" then certificate will include zone name, if "localhost" then localhost, if "ip" then will include host IPs.
	DnsProvider      string        `protobuf:"bytes,4,opt,name=dns_provider,json=dnsProvider,proto3" json:"dns_provider,omitempty"`                   // code name of the DNS provider, if empty then cert_provider should be self or external
	CertProvider     string        `protobuf:"bytes,5,opt,name=cert_provider,json=certProvider,proto3" json:"cert_provider,omitempty"`                // self, acme, ext
	Certificates     *Certificates `protobuf:"bytes,10,opt,name=certificates,proto3" json:"certificates,omitempty"`                                   // certificates used to create TLS connection
	SelfSigner       string        `protobuf:"bytes,11,opt,name=self_signer,json=selfSigner,proto3" json:"self_signer,omitempty"`                     // only for self cert_provider
	AcmeEmail        string        `protobuf:"bytes,12,opt,name=acme_email,json=acmeEmail,proto3" json:"acme_email,omitempty"`                        // only for acme cert_provider
	DnsProviderToken string        `protobuf:"bytes,13,opt,name=dns_provider_token,json=dnsProviderToken,proto3" json:"dns_provider_token,omitempty"` // optional token for DNS provider
	OwnerId          string        `protobuf:"bytes,14,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`                              // associated owner id
	CertId           string        `protobuf:"bytes,15,opt,name=cert_id,json=certId,proto3" json:"cert_id,omitempty"`                                 // associated cert id
}

func (x *Zone) Reset() {
	*x = Zone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certificates_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zone) ProtoMessage() {}

func (x *Zone) ProtoReflect() protoreflect.Message {
	mi := &file_certificates_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zone.ProtoReflect.Descriptor instead.
func (*Zone) Descriptor() ([]byte, []int) {
	return file_certificates_proto_rawDescGZIP(), []int{0}
}

func (x *Zone) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Zone) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *Zone) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Zone) GetDnsProvider() string {
	if x != nil {
		return x.DnsProvider
	}
	return ""
}

func (x *Zone) GetCertProvider() string {
	if x != nil {
		return x.CertProvider
	}
	return ""
}

func (x *Zone) GetCertificates() *Certificates {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *Zone) GetSelfSigner() string {
	if x != nil {
		return x.SelfSigner
	}
	return ""
}

func (x *Zone) GetAcmeEmail() string {
	if x != nil {
		return x.AcmeEmail
	}
	return ""
}

func (x *Zone) GetDnsProviderToken() string {
	if x != nil {
		return x.DnsProviderToken
	}
	return ""
}

func (x *Zone) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Zone) GetCertId() string {
	if x != nil {
		return x.CertId
	}
	return ""
}

type Certificates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain            string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	CertUrl           string `protobuf:"bytes,2,opt,name=cert_url,json=certUrl,proto3" json:"cert_url,omitempty"`                               // needs for ACME
	CertStableUrl     string `protobuf:"bytes,3,opt,name=cert_stable_url,json=certStableUrl,proto3" json:"cert_stable_url,omitempty"`           // needs for ACME
	PrivateKey        []byte `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`                      // in PEM format
	Certificate       []byte `protobuf:"bytes,5,opt,name=certificate,proto3" json:"certificate,omitempty"`                                      // in PEM format
	IssuerCertificate []byte `protobuf:"bytes,6,opt,name=issuer_certificate,json=issuerCertificate,proto3" json:"issuer_certificate,omitempty"` // in PEM format
	Csr               []byte `protobuf:"bytes,7,opt,name=csr,proto3" json:"csr,omitempty"`
}

func (x *Certificates) Reset() {
	*x = Certificates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certificates_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Certificates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificates) ProtoMessage() {}

func (x *Certificates) ProtoReflect() protoreflect.Message {
	mi := &file_certificates_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificates.ProtoReflect.Descriptor instead.
func (*Certificates) Descriptor() ([]byte, []int) {
	return file_certificates_proto_rawDescGZIP(), []int{1}
}

func (x *Certificates) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Certificates) GetCertUrl() string {
	if x != nil {
		return x.CertUrl
	}
	return ""
}

func (x *Certificates) GetCertStableUrl() string {
	if x != nil {
		return x.CertStableUrl
	}
	return ""
}

func (x *Certificates) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *Certificates) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *Certificates) GetIssuerCertificate() []byte {
	if x != nil {
		return x.IssuerCertificate
	}
	return nil
}

func (x *Certificates) GetCsr() []byte {
	if x != nil {
		return x.Csr
	}
	return nil
}

type AcmeAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email      string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	PublicKey  []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey []byte `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *AcmeAccount) Reset() {
	*x = AcmeAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certificates_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcmeAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcmeAccount) ProtoMessage() {}

func (x *AcmeAccount) ProtoReflect() protoreflect.Message {
	mi := &file_certificates_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcmeAccount.ProtoReflect.Descriptor instead.
func (*AcmeAccount) Descriptor() ([]byte, []int) {
	return file_certificates_proto_rawDescGZIP(), []int{2}
}

func (x *AcmeAccount) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AcmeAccount) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *AcmeAccount) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

type SelfSigner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Certificate []byte      `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
	PrivateKey  []byte      `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Issuer      *SelfSigner `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *SelfSigner) Reset() {
	*x = SelfSigner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_certificates_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfSigner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfSigner) ProtoMessage() {}

func (x *SelfSigner) ProtoReflect() protoreflect.Message {
	mi := &file_certificates_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfSigner.ProtoReflect.Descriptor instead.
func (*SelfSigner) Descriptor() ([]byte, []int) {
	return file_certificates_proto_rawDescGZIP(), []int{3}
}

func (x *SelfSigner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SelfSigner) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *SelfSigner) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SelfSigner) GetIssuer() *SelfSigner {
	if x != nil {
		return x.Issuer
	}
	return nil
}

var File_certificates_proto protoreflect.FileDescriptor

var file_certificates_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0xf2, 0x02, 0x0a,
	0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x6d, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6e, 0x73,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x65, 0x72, 0x74, 0x49,
	0x64, 0x22, 0xed, 0x01, 0x0a, 0x0c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x65,
	0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x73, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x73,
	0x72, 0x22, 0x63, 0x0a, 0x0b, 0x41, 0x63, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x66, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x06,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x42, 0x33, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x42, 0x0c, 0x53, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x0b, 0x2e, 0x2e, 0x2f,
	0x73, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x70, 0x62, 0xa2, 0x02, 0x02, 0x53, 0x50, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_certificates_proto_rawDescOnce sync.Once
	file_certificates_proto_rawDescData = file_certificates_proto_rawDesc
)

func file_certificates_proto_rawDescGZIP() []byte {
	file_certificates_proto_rawDescOnce.Do(func() {
		file_certificates_proto_rawDescData = protoimpl.X.CompressGZIP(file_certificates_proto_rawDescData)
	})
	return file_certificates_proto_rawDescData
}

var file_certificates_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_certificates_proto_goTypes = []interface{}{
	(*Zone)(nil),         // 0: sprint.Zone
	(*Certificates)(nil), // 1: sprint.Certificates
	(*AcmeAccount)(nil),  // 2: sprint.AcmeAccount
	(*SelfSigner)(nil),   // 3: sprint.SelfSigner
}
var file_certificates_proto_depIdxs = []int32{
	1, // 0: sprint.Zone.certificates:type_name -> sprint.Certificates
	3, // 1: sprint.SelfSigner.issuer:type_name -> sprint.SelfSigner
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_certificates_proto_init() }
func file_certificates_proto_init() {
	if File_certificates_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_certificates_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Zone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certificates_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Certificates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certificates_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcmeAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_certificates_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfSigner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_certificates_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_certificates_proto_goTypes,
		DependencyIndexes: file_certificates_proto_depIdxs,
		MessageInfos:      file_certificates_proto_msgTypes,
	}.Build()
	File_certificates_proto = out.File
	file_certificates_proto_rawDesc = nil
	file_certificates_proto_goTypes = nil
	file_certificates_proto_depIdxs = nil
}
