//
// Copyright (c) 2023 Zander Schwid & Co. LLC.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: control.proto

package sprintpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ControlService_Status_FullMethodName         = "/sprint.ControlService/Status"
	ControlService_Node_FullMethodName           = "/sprint.ControlService/Node"
	ControlService_Config_FullMethodName         = "/sprint.ControlService/Config"
	ControlService_Certificate_FullMethodName    = "/sprint.ControlService/Certificate"
	ControlService_StorageConsole_FullMethodName = "/sprint.ControlService/StorageConsole"
	ControlService_Storage_FullMethodName        = "/sprint.ControlService/Storage"
	ControlService_Job_FullMethodName            = "/sprint.ControlService/Job"
)

// ControlServiceClient is the client API for ControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlServiceClient interface {
	//
	// Gets status info
	//
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	//
	// Node management commands
	//
	Node(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResult, error)
	//
	// Config management commands
	//
	Config(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResult, error)
	//
	// Certificate management commands
	//
	Certificate(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResult, error)
	//
	// Storage console
	//
	StorageConsole(ctx context.Context, opts ...grpc.CallOption) (ControlService_StorageConsoleClient, error)
	//
	// Storage management commands
	//
	Storage(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResult, error)
	//
	// Job commands
	//
	Job(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResult, error)
}

type controlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlServiceClient(cc grpc.ClientConnInterface) ControlServiceClient {
	return &controlServiceClient{cc}
}

func (c *controlServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, ControlService_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) Node(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, ControlService_Node_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) Config(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, ControlService_Config_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) Certificate(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, ControlService_Certificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) StorageConsole(ctx context.Context, opts ...grpc.CallOption) (ControlService_StorageConsoleClient, error) {
	stream, err := c.cc.NewStream(ctx, &ControlService_ServiceDesc.Streams[0], ControlService_StorageConsole_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &controlServiceStorageConsoleClient{stream}
	return x, nil
}

type ControlService_StorageConsoleClient interface {
	Send(*StorageConsoleRequest) error
	Recv() (*StorageConsoleResponse, error)
	grpc.ClientStream
}

type controlServiceStorageConsoleClient struct {
	grpc.ClientStream
}

func (x *controlServiceStorageConsoleClient) Send(m *StorageConsoleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controlServiceStorageConsoleClient) Recv() (*StorageConsoleResponse, error) {
	m := new(StorageConsoleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlServiceClient) Storage(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, ControlService_Storage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlServiceClient) Job(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResult, error) {
	out := new(CommandResult)
	err := c.cc.Invoke(ctx, ControlService_Job_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServiceServer is the server API for ControlService service.
// All implementations must embed UnimplementedControlServiceServer
// for forward compatibility
type ControlServiceServer interface {
	//
	// Gets status info
	//
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	//
	// Node management commands
	//
	Node(context.Context, *Command) (*CommandResult, error)
	//
	// Config management commands
	//
	Config(context.Context, *Command) (*CommandResult, error)
	//
	// Certificate management commands
	//
	Certificate(context.Context, *Command) (*CommandResult, error)
	//
	// Storage console
	//
	StorageConsole(ControlService_StorageConsoleServer) error
	//
	// Storage management commands
	//
	Storage(context.Context, *Command) (*CommandResult, error)
	//
	// Job commands
	//
	Job(context.Context, *Command) (*CommandResult, error)
	mustEmbedUnimplementedControlServiceServer()
}

// UnimplementedControlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedControlServiceServer struct {
}

func (UnimplementedControlServiceServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedControlServiceServer) Node(context.Context, *Command) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Node not implemented")
}
func (UnimplementedControlServiceServer) Config(context.Context, *Command) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedControlServiceServer) Certificate(context.Context, *Command) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Certificate not implemented")
}
func (UnimplementedControlServiceServer) StorageConsole(ControlService_StorageConsoleServer) error {
	return status.Errorf(codes.Unimplemented, "method StorageConsole not implemented")
}
func (UnimplementedControlServiceServer) Storage(context.Context, *Command) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Storage not implemented")
}
func (UnimplementedControlServiceServer) Job(context.Context, *Command) (*CommandResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Job not implemented")
}
func (UnimplementedControlServiceServer) mustEmbedUnimplementedControlServiceServer() {}

// UnsafeControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServiceServer will
// result in compilation errors.
type UnsafeControlServiceServer interface {
	mustEmbedUnimplementedControlServiceServer()
}

func RegisterControlServiceServer(s grpc.ServiceRegistrar, srv ControlServiceServer) {
	s.RegisterService(&ControlService_ServiceDesc, srv)
}

func _ControlService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_Node_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Node(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_Node_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Node(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_Config_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Config(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_Certificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Certificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_Certificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Certificate(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_StorageConsole_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlServiceServer).StorageConsole(&controlServiceStorageConsoleServer{stream})
}

type ControlService_StorageConsoleServer interface {
	Send(*StorageConsoleResponse) error
	Recv() (*StorageConsoleRequest, error)
	grpc.ServerStream
}

type controlServiceStorageConsoleServer struct {
	grpc.ServerStream
}

func (x *controlServiceStorageConsoleServer) Send(m *StorageConsoleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controlServiceStorageConsoleServer) Recv() (*StorageConsoleRequest, error) {
	m := new(StorageConsoleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ControlService_Storage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Storage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_Storage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Storage(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlService_Job_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServiceServer).Job(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlService_Job_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServiceServer).Job(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlService_ServiceDesc is the grpc.ServiceDesc for ControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sprint.ControlService",
	HandlerType: (*ControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _ControlService_Status_Handler,
		},
		{
			MethodName: "Node",
			Handler:    _ControlService_Node_Handler,
		},
		{
			MethodName: "Config",
			Handler:    _ControlService_Config_Handler,
		},
		{
			MethodName: "Certificate",
			Handler:    _ControlService_Certificate_Handler,
		},
		{
			MethodName: "Storage",
			Handler:    _ControlService_Storage_Handler,
		},
		{
			MethodName: "Job",
			Handler:    _ControlService_Job_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StorageConsole",
			Handler:       _ControlService_StorageConsole_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "control.proto",
}
